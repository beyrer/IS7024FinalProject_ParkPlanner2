// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ParkPlannerVisitor;
//
//    var visitorCenter = VisitorCenter.FromJson(jsonString);

namespace ParkPlannerVisitor
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class VisitorCenter
    {
        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Total { get; set; }

        [JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Limit { get; set; }

        [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Start { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public List<Datum> Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("parkCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ParkCode { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        [JsonProperty("latLong", NullValueHandling = NullValueHandling.Ignore)]
        public string LatLong { get; set; }

        [JsonProperty("audioDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string AudioDescription { get; set; }

        [JsonProperty("isPassportStampLocation", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? IsPassportStampLocation { get; set; }

        [JsonProperty("passportStampLocationDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string PassportStampLocationDescription { get; set; }

        [JsonProperty("passportStampImages", NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> PassportStampImages { get; set; }

        [JsonProperty("geometryPoiId", NullValueHandling = NullValueHandling.Ignore)]
        public string GeometryPoiId { get; set; }

        [JsonProperty("amenities", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Amenities { get; set; }

        [JsonProperty("contacts", NullValueHandling = NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }

        [JsonProperty("directionsInfo", NullValueHandling = NullValueHandling.Ignore)]
        public string DirectionsInfo { get; set; }

        [JsonProperty("directionsUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string DirectionsUrl { get; set; }

        [JsonProperty("operatingHours", NullValueHandling = NullValueHandling.Ignore)]
        public List<OperatingHour> OperatingHours { get; set; }

        [JsonProperty("addresses", NullValueHandling = NullValueHandling.Ignore)]
        public List<Address> Addresses { get; set; }

        [JsonProperty("images", NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> Images { get; set; }

        [JsonProperty("multimedia", NullValueHandling = NullValueHandling.Ignore)]
        public List<Multimedia> Multimedia { get; set; }

        [JsonProperty("relevanceScore", NullValueHandling = NullValueHandling.Ignore)]
        public long? RelevanceScore { get; set; }

        [JsonProperty("lastIndexedDate", NullValueHandling = NullValueHandling.Ignore)]
        public string LastIndexedDate { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("postalCode", NullValueHandling = NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("stateCode", NullValueHandling = NullValueHandling.Ignore)]
        public string StateCode { get; set; }

        [JsonProperty("countryCode", NullValueHandling = NullValueHandling.Ignore)]
        public CountryCode? CountryCode { get; set; }

        [JsonProperty("provinceTerritoryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ProvinceTerritoryCode { get; set; }

        [JsonProperty("line1", NullValueHandling = NullValueHandling.Ignore)]
        public string Line1 { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public AddressType? Type { get; set; }

        [JsonProperty("line3", NullValueHandling = NullValueHandling.Ignore)]
        public Line3? Line3 { get; set; }

        [JsonProperty("line2", NullValueHandling = NullValueHandling.Ignore)]
        public Line2? Line2 { get; set; }
    }

    public partial class Contacts
    {
        [JsonProperty("phoneNumbers", NullValueHandling = NullValueHandling.Ignore)]
        public List<PhoneNumber> PhoneNumbers { get; set; }

        [JsonProperty("emailAddresses", NullValueHandling = NullValueHandling.Ignore)]
        public List<EmailAddress> EmailAddresses { get; set; }
    }

    public partial class EmailAddress
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("emailAddress", NullValueHandling = NullValueHandling.Ignore)]
        public string EmailAddressEmailAddress { get; set; }
    }

    public partial class PhoneNumber
    {
        [JsonProperty("phoneNumber", NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneNumberPhoneNumber { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("extension", NullValueHandling = NullValueHandling.Ignore)]
        public string Extension { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public PhoneNumberType? Type { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("credit", NullValueHandling = NullValueHandling.Ignore)]
        public string Credit { get; set; }

        [JsonProperty("crops", NullValueHandling = NullValueHandling.Ignore)]
        public List<Crop> Crops { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("altText", NullValueHandling = NullValueHandling.Ignore)]
        public string AltText { get; set; }

        [JsonProperty("caption", NullValueHandling = NullValueHandling.Ignore)]
        public string Caption { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class Crop
    {
        [JsonProperty("aspectRatio", NullValueHandling = NullValueHandling.Ignore)]
        public long? AspectRatio { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class Multimedia
    {
        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class OperatingHour
    {
        [JsonProperty("exceptions", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExceptionElement> Exceptions { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("standardHours", NullValueHandling = NullValueHandling.Ignore)]
        public Hours StandardHours { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class ExceptionElement
    {
        [JsonProperty("exceptionHours", NullValueHandling = NullValueHandling.Ignore)]
        public Hours ExceptionHours { get; set; }

        [JsonProperty("startDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? StartDate { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("endDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? EndDate { get; set; }
    }

    public partial class Hours
    {
        [JsonProperty("wednesday", NullValueHandling = NullValueHandling.Ignore)]
        public string Wednesday { get; set; }

        [JsonProperty("monday", NullValueHandling = NullValueHandling.Ignore)]
        public string Monday { get; set; }

        [JsonProperty("thursday", NullValueHandling = NullValueHandling.Ignore)]
        public string Thursday { get; set; }

        [JsonProperty("sunday", NullValueHandling = NullValueHandling.Ignore)]
        public string Sunday { get; set; }

        [JsonProperty("tuesday", NullValueHandling = NullValueHandling.Ignore)]
        public string Tuesday { get; set; }

        [JsonProperty("friday", NullValueHandling = NullValueHandling.Ignore)]
        public string Friday { get; set; }

        [JsonProperty("saturday", NullValueHandling = NullValueHandling.Ignore)]
        public string Saturday { get; set; }
    }

    public enum CountryCode { Us };

    public enum Line2 { Empty, SalinasPuebloMissionsNm, SitnasuakBuilding, Suite105, Suite306, The101NorthCollegeStreet, The199HemphillKnobRoad, The1BearValleyRoad };

    public enum Line3 { Empty, PoBox517, The69AboRuinsRoad };

    public enum AddressType { Mailing, Physical };

    public enum PhoneNumberType { Fax, Voice };

    public partial class VisitorCenter
    {
        public static VisitorCenter FromJson(string json) => JsonConvert.DeserializeObject<VisitorCenter>(json, ParkPlannerVisitor.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VisitorCenter self) => JsonConvert.SerializeObject(self, ParkPlannerVisitor.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CountryCodeConverter.Singleton,
                Line2Converter.Singleton,
                Line3Converter.Singleton,
                AddressTypeConverter.Singleton,
                PhoneNumberTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CountryCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CountryCode) || t == typeof(CountryCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "US")
            {
                return CountryCode.Us;
            }
            throw new Exception("Cannot unmarshal type CountryCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CountryCode)untypedValue;
            if (value == CountryCode.Us)
            {
                serializer.Serialize(writer, "US");
                return;
            }
            throw new Exception("Cannot marshal type CountryCode");
        }

        public static readonly CountryCodeConverter Singleton = new CountryCodeConverter();
    }

    internal class Line2Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Line2) || t == typeof(Line2?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Line2.Empty;
                case "1 Bear Valley Road":
                    return Line2.The1BearValleyRoad;
                case "101 North College Street":
                    return Line2.The101NorthCollegeStreet;
                case "199 Hemphill Knob Road":
                    return Line2.The199HemphillKnobRoad;
                case "Salinas Pueblo Missions NM":
                    return Line2.SalinasPuebloMissionsNm;
                case "Sitnasuak Building":
                    return Line2.SitnasuakBuilding;
                case "Suite 105":
                    return Line2.Suite105;
                case "Suite 306":
                    return Line2.Suite306;
            }
            throw new Exception("Cannot unmarshal type Line2");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Line2)untypedValue;
            switch (value)
            {
                case Line2.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Line2.The1BearValleyRoad:
                    serializer.Serialize(writer, "1 Bear Valley Road");
                    return;
                case Line2.The101NorthCollegeStreet:
                    serializer.Serialize(writer, "101 North College Street");
                    return;
                case Line2.The199HemphillKnobRoad:
                    serializer.Serialize(writer, "199 Hemphill Knob Road");
                    return;
                case Line2.SalinasPuebloMissionsNm:
                    serializer.Serialize(writer, "Salinas Pueblo Missions NM");
                    return;
                case Line2.SitnasuakBuilding:
                    serializer.Serialize(writer, "Sitnasuak Building");
                    return;
                case Line2.Suite105:
                    serializer.Serialize(writer, "Suite 105");
                    return;
                case Line2.Suite306:
                    serializer.Serialize(writer, "Suite 306");
                    return;
            }
            throw new Exception("Cannot marshal type Line2");
        }

        public static readonly Line2Converter Singleton = new Line2Converter();
    }

    internal class Line3Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Line3) || t == typeof(Line3?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Line3.Empty;
                case "#69 Abo Ruins Road":
                    return Line3.The69AboRuinsRoad;
                case "PO Box 517":
                    return Line3.PoBox517;
            }
            throw new Exception("Cannot unmarshal type Line3");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Line3)untypedValue;
            switch (value)
            {
                case Line3.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Line3.The69AboRuinsRoad:
                    serializer.Serialize(writer, "#69 Abo Ruins Road");
                    return;
                case Line3.PoBox517:
                    serializer.Serialize(writer, "PO Box 517");
                    return;
            }
            throw new Exception("Cannot marshal type Line3");
        }

        public static readonly Line3Converter Singleton = new Line3Converter();
    }

    internal class AddressTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AddressType) || t == typeof(AddressType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Mailing":
                    return AddressType.Mailing;
                case "Physical":
                    return AddressType.Physical;
            }
            throw new Exception("Cannot unmarshal type AddressType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AddressType)untypedValue;
            switch (value)
            {
                case AddressType.Mailing:
                    serializer.Serialize(writer, "Mailing");
                    return;
                case AddressType.Physical:
                    serializer.Serialize(writer, "Physical");
                    return;
            }
            throw new Exception("Cannot marshal type AddressType");
        }

        public static readonly AddressTypeConverter Singleton = new AddressTypeConverter();
    }

    internal class PhoneNumberTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PhoneNumberType) || t == typeof(PhoneNumberType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Fax":
                    return PhoneNumberType.Fax;
                case "Voice":
                    return PhoneNumberType.Voice;
            }
            throw new Exception("Cannot unmarshal type PhoneNumberType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PhoneNumberType)untypedValue;
            switch (value)
            {
                case PhoneNumberType.Fax:
                    serializer.Serialize(writer, "Fax");
                    return;
                case PhoneNumberType.Voice:
                    serializer.Serialize(writer, "Voice");
                    return;
            }
            throw new Exception("Cannot marshal type PhoneNumberType");
        }

        public static readonly PhoneNumberTypeConverter Singleton = new PhoneNumberTypeConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
